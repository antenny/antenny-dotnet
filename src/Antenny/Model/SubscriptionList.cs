/*
 * Antenny API
 *
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Antenny.Client.OpenAPIDateConverter;

namespace Antenny.Model
{
    /// <summary>
    /// SubscriptionList
    /// </summary>
    [DataContract(Name = "SubscriptionList")]
    public partial class SubscriptionList : IEquatable<SubscriptionList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionList" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="lastKey">lastKey.</param>
        public SubscriptionList(List<Subscription> items = default(List<Subscription>), string lastKey = default(string))
        {
            this.Items = items;
            this.LastKey = lastKey;
        }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Subscription> Items { get; set; }

        /// <summary>
        /// Gets or Sets LastKey
        /// </summary>
        [DataMember(Name = "lastKey", EmitDefaultValue = true)]
        public string LastKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionList {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LastKey: ").Append(LastKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionList);
        }

        /// <summary>
        /// Returns true if SubscriptionList instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.LastKey == input.LastKey ||
                    (this.LastKey != null &&
                    this.LastKey.Equals(input.LastKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.LastKey != null)
                    hashCode = hashCode * 59 + this.LastKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
