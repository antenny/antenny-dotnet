/*
 * Antenny API
 *
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Antenny.Client.OpenAPIDateConverter;

namespace Antenny.Model
{
    /// <summary>
    /// Registration
    /// </summary>
    [DataContract(Name = "Registration")]
    public partial class Registration : IEquatable<Registration>, IValidatableObject
    {
        /// <summary>
        /// Registration status
        /// </summary>
        /// <value>Registration status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUBSCRIBEPENDING for value: SUBSCRIBE-PENDING
            /// </summary>
            [EnumMember(Value = "SUBSCRIBE-PENDING")]
            SUBSCRIBEPENDING = 1,

            /// <summary>
            /// Enum SUBSCRIBESUCCESS for value: SUBSCRIBE-SUCCESS
            /// </summary>
            [EnumMember(Value = "SUBSCRIBE-SUCCESS")]
            SUBSCRIBESUCCESS = 2,

            /// <summary>
            /// Enum SUBSCRIBEFAIL for value: SUBSCRIBE-FAIL
            /// </summary>
            [EnumMember(Value = "SUBSCRIBE-FAIL")]
            SUBSCRIBEFAIL = 3,

            /// <summary>
            /// Enum UNSUBSCRIBEPENDING for value: UNSUBSCRIBE-PENDING
            /// </summary>
            [EnumMember(Value = "UNSUBSCRIBE-PENDING")]
            UNSUBSCRIBEPENDING = 4,

            /// <summary>
            /// Enum UNSUBSCRIBESUCCESS for value: UNSUBSCRIBE-SUCCESS
            /// </summary>
            [EnumMember(Value = "UNSUBSCRIBE-SUCCESS")]
            UNSUBSCRIBESUCCESS = 5

        }

        /// <summary>
        /// Registration status
        /// </summary>
        /// <value>Registration status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="secret">Signing secret.</param>
        /// <param name="status">Registration status.</param>
        /// <param name="clients">clients.</param>
        /// <param name="subscriptions">subscriptions.</param>
        /// <param name="created">created.</param>
        /// <param name="modified">modified.</param>
        public Registration(Guid id = default(Guid), Guid customerId = default(Guid), string secret = default(string), StatusEnum? status = default(StatusEnum?), List<string> clients = default(List<string>), List<string> subscriptions = default(List<string>), DateTime created = default(DateTime), DateTime modified = default(DateTime))
        {
            this.Id = id;
            this.CustomerId = customerId;
            this.Secret = secret;
            this.Status = status;
            this.Clients = clients;
            this.Subscriptions = subscriptions;
            this.Created = created;
            this.Modified = modified;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Signing secret
        /// </summary>
        /// <value>Signing secret</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name = "clients", EmitDefaultValue = false)]
        public List<string> Clients { get; set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [DataMember(Name = "subscriptions", EmitDefaultValue = false)]
        public List<string> Subscriptions { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Registration);
        }

        /// <summary>
        /// Returns true if Registration instances are equal
        /// </summary>
        /// <param name="input">Instance of Registration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Registration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Clients == input.Clients ||
                    this.Clients != null &&
                    input.Clients != null &&
                    this.Clients.SequenceEqual(input.Clients)
                ) && 
                (
                    this.Subscriptions == input.Subscriptions ||
                    this.Subscriptions != null &&
                    input.Subscriptions != null &&
                    this.Subscriptions.SequenceEqual(input.Subscriptions)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Clients != null)
                    hashCode = hashCode * 59 + this.Clients.GetHashCode();
                if (this.Subscriptions != null)
                    hashCode = hashCode * 59 + this.Subscriptions.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
