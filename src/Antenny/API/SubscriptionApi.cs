/*
 * Antenny API
 *
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Antenny.Client;
using Antenny.Model;

namespace Antenny.API
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <remarks>
        /// Cancels a subscription for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        void CancelSubscription(Guid subId, InlineObject inlineObject);

        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <remarks>
        /// Cancels a subscription for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSubscriptionWithHttpInfo(Guid subId, InlineObject inlineObject);
        /// <summary>
        /// Creates a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <returns>Subscription</returns>
        Subscription CreateSubscription(NewSubscription newSubscription);

        /// <summary>
        /// Creates a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> CreateSubscriptionWithHttpInfo(NewSubscription newSubscription);
        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <remarks>
        /// Gets a subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <returns>Subscription</returns>
        Subscription GetSubscription(Guid subId);

        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <remarks>
        /// Gets a subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> GetSubscriptionWithHttpInfo(Guid subId);
        /// <summary>
        /// Gets a list of subscriptions
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>SubscriptionList</returns>
        SubscriptionList ListSubscriptions(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string));

        /// <summary>
        /// Gets a list of subscriptions
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ApiResponse of SubscriptionList</returns>
        ApiResponse<SubscriptionList> ListSubscriptionsWithHttpInfo(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <remarks>
        /// Cancels a subscription for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSubscriptionAsync(Guid subId, InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <remarks>
        /// Cancels a subscription for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSubscriptionWithHttpInfoAsync(Guid subId, InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> CreateSubscriptionAsync(NewSubscription newSubscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> CreateSubscriptionWithHttpInfoAsync(NewSubscription newSubscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <remarks>
        /// Gets a subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync(Guid subId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <remarks>
        /// Gets a subscription
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync(Guid subId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of subscriptions
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionList</returns>
        System.Threading.Tasks.Task<SubscriptionList> ListSubscriptionsAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of subscriptions
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionList>> ListSubscriptionsWithHttpInfoAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionApi : ISubscriptionApiSync, ISubscriptionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionApi : ISubscriptionApi
    {
        private Antenny.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionApi(String basePath)
        {
            this.Configuration = Antenny.Client.Configuration.MergeConfigurations(
                Antenny.Client.GlobalConfiguration.Instance,
                new Antenny.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionApi(Antenny.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Antenny.Client.Configuration.MergeConfigurations(
                Antenny.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionApi(Antenny.Client.ISynchronousClient client, Antenny.Client.IAsynchronousClient asyncClient, Antenny.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Antenny.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Antenny.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Antenny.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Antenny.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancels a subscription Cancels a subscription for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        public void CancelSubscription(Guid subId, InlineObject inlineObject)
        {
            CancelSubscriptionWithHttpInfo(subId, inlineObject);
        }

        /// <summary>
        /// Cancels a subscription Cancels a subscription for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Antenny.Client.ApiResponse<Object> CancelSubscriptionWithHttpInfo(Guid subId, InlineObject inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling SubscriptionApi->CancelSubscription");

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subId", Antenny.Client.ClientUtils.ParameterToString(subId)); // path parameter
            localVarRequestOptions.Data = inlineObject;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/subscriptions/{subId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels a subscription Cancels a subscription for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSubscriptionAsync(Guid subId, InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelSubscriptionWithHttpInfoAsync(subId, inlineObject, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancels a subscription Cancels a subscription for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<Object>> CancelSubscriptionWithHttpInfoAsync(Guid subId, InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling SubscriptionApi->CancelSubscription");


            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subId", Antenny.Client.ClientUtils.ParameterToString(subId)); // path parameter
            localVarRequestOptions.Data = inlineObject;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/subscriptions/{subId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a subscription Creates a new subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <returns>Subscription</returns>
        public Subscription CreateSubscription(NewSubscription newSubscription)
        {
            Antenny.Client.ApiResponse<Subscription> localVarResponse = CreateSubscriptionWithHttpInfo(newSubscription);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a subscription Creates a new subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <returns>ApiResponse of Subscription</returns>
        public Antenny.Client.ApiResponse<Subscription> CreateSubscriptionWithHttpInfo(NewSubscription newSubscription)
        {
            // verify the required parameter 'newSubscription' is set
            if (newSubscription == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'newSubscription' when calling SubscriptionApi->CreateSubscription");

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = newSubscription;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Subscription>("/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a subscription Creates a new subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> CreateSubscriptionAsync(NewSubscription newSubscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<Subscription> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(newSubscription, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a subscription Creates a new subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newSubscription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<Subscription>> CreateSubscriptionWithHttpInfoAsync(NewSubscription newSubscription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newSubscription' is set
            if (newSubscription == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'newSubscription' when calling SubscriptionApi->CreateSubscription");


            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = newSubscription;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Subscription>("/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a subscription Gets a subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <returns>Subscription</returns>
        public Subscription GetSubscription(Guid subId)
        {
            Antenny.Client.ApiResponse<Subscription> localVarResponse = GetSubscriptionWithHttpInfo(subId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a subscription Gets a subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <returns>ApiResponse of Subscription</returns>
        public Antenny.Client.ApiResponse<Subscription> GetSubscriptionWithHttpInfo(Guid subId)
        {
            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subId", Antenny.Client.ClientUtils.ParameterToString(subId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Subscription>("/subscriptions/{subId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a subscription Gets a subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync(Guid subId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<Subscription> localVarResponse = await GetSubscriptionWithHttpInfoAsync(subId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a subscription Gets a subscription
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subId">Subscription id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync(Guid subId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subId", Antenny.Client.ClientUtils.ParameterToString(subId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Subscription>("/subscriptions/{subId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of subscriptions Lists subscriptions for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>SubscriptionList</returns>
        public SubscriptionList ListSubscriptions(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string))
        {
            Antenny.Client.ApiResponse<SubscriptionList> localVarResponse = ListSubscriptionsWithHttpInfo(custId, sort, limit, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of subscriptions Lists subscriptions for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ApiResponse of SubscriptionList</returns>
        public Antenny.Client.ApiResponse<SubscriptionList> ListSubscriptionsWithHttpInfo(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string))
        {
            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custId", Antenny.Client.ClientUtils.ParameterToString(custId)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionList>("/customers/{custId}/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of subscriptions Lists subscriptions for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionList</returns>
        public async System.Threading.Tasks.Task<SubscriptionList> ListSubscriptionsAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<SubscriptionList> localVarResponse = await ListSubscriptionsWithHttpInfoAsync(custId, sort, limit, startKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of subscriptions Lists subscriptions for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get subscriptions</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionList)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<SubscriptionList>> ListSubscriptionsWithHttpInfoAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custId", Antenny.Client.ClientUtils.ParameterToString(custId)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionList>("/customers/{custId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
