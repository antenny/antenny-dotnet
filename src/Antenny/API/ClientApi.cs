/*
 * Antenny API
 *
 * This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@antenny.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Antenny.Client;
using Antenny.Model;

namespace Antenny.API
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a client
        /// </summary>
        /// <remarks>
        /// Creates a new client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <returns>ModelClient</returns>
        ModelClient CreateClient(NewClient newClient);

        /// <summary>
        /// Creates a client
        /// </summary>
        /// <remarks>
        /// Creates a new client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> CreateClientWithHttpInfo(NewClient newClient);
        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Deletes a client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns></returns>
        void DeleteClient(Guid clientId);

        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Deletes a client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientWithHttpInfo(Guid clientId);
        /// <summary>
        /// Gets a client
        /// </summary>
        /// <remarks>
        /// Gets a client for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ModelClient</returns>
        ModelClient GetClient(Guid clientId);

        /// <summary>
        /// Gets a client
        /// </summary>
        /// <remarks>
        /// Gets a client for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> GetClientWithHttpInfo(Guid clientId);
        /// <summary>
        /// Gets a list of clients
        /// </summary>
        /// <remarks>
        /// List of clients for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ClientList</returns>
        ClientList ListClients(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string));

        /// <summary>
        /// Gets a list of clients
        /// </summary>
        /// <remarks>
        /// List of clients for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ApiResponse of ClientList</returns>
        ApiResponse<ClientList> ListClientsWithHttpInfo(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a client
        /// </summary>
        /// <remarks>
        /// Creates a new client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> CreateClientAsync(NewClient newClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a client
        /// </summary>
        /// <remarks>
        /// Creates a new client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> CreateClientWithHttpInfoAsync(NewClient newClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Deletes a client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Deletes a client
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientWithHttpInfoAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a client
        /// </summary>
        /// <remarks>
        /// Gets a client for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> GetClientAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a client
        /// </summary>
        /// <remarks>
        /// Gets a client for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> GetClientWithHttpInfoAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of clients
        /// </summary>
        /// <remarks>
        /// List of clients for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientList</returns>
        System.Threading.Tasks.Task<ClientList> ListClientsAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of clients
        /// </summary>
        /// <remarks>
        /// List of clients for a customer
        /// </remarks>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientList>> ListClientsWithHttpInfoAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApi : IClientApiSync, IClientApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientApi : IClientApi
    {
        private Antenny.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi(String basePath)
        {
            this.Configuration = Antenny.Client.Configuration.MergeConfigurations(
                Antenny.Client.GlobalConfiguration.Instance,
                new Antenny.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientApi(Antenny.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Antenny.Client.Configuration.MergeConfigurations(
                Antenny.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Antenny.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientApi(Antenny.Client.ISynchronousClient client, Antenny.Client.IAsynchronousClient asyncClient, Antenny.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Antenny.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Antenny.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Antenny.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Antenny.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Antenny.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a client Creates a new client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <returns>ModelClient</returns>
        public ModelClient CreateClient(NewClient newClient)
        {
            Antenny.Client.ApiResponse<ModelClient> localVarResponse = CreateClientWithHttpInfo(newClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a client Creates a new client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        public Antenny.Client.ApiResponse<ModelClient> CreateClientWithHttpInfo(NewClient newClient)
        {
            // verify the required parameter 'newClient' is set
            if (newClient == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'newClient' when calling ClientApi->CreateClient");

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = newClient;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModelClient>("/clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a client Creates a new client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> CreateClientAsync(NewClient newClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<ModelClient> localVarResponse = await CreateClientWithHttpInfoAsync(newClient, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a client Creates a new client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newClient"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<ModelClient>> CreateClientWithHttpInfoAsync(NewClient newClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newClient' is set
            if (newClient == null)
                throw new Antenny.Client.ApiException(400, "Missing required parameter 'newClient' when calling ClientApi->CreateClient");


            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = newClient;

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ModelClient>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a client Deletes a client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns></returns>
        public void DeleteClient(Guid clientId)
        {
            DeleteClientWithHttpInfo(clientId);
        }

        /// <summary>
        /// Deletes a client Deletes a client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Antenny.Client.ApiResponse<Object> DeleteClientWithHttpInfo(Guid clientId)
        {
            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Antenny.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a client Deletes a client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteClientWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a client Deletes a client
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<Object>> DeleteClientWithHttpInfoAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Antenny.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a client Gets a client for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ModelClient</returns>
        public ModelClient GetClient(Guid clientId)
        {
            Antenny.Client.ApiResponse<ModelClient> localVarResponse = GetClientWithHttpInfo(clientId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a client Gets a client for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public Antenny.Client.ApiResponse<ModelClient> GetClientWithHttpInfo(Guid clientId)
        {
            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Antenny.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelClient>("/clients/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a client Gets a client for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> GetClientAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<ModelClient> localVarResponse = await GetClientWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a client Gets a client for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client Id to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<ModelClient>> GetClientWithHttpInfoAsync(Guid clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Antenny.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelClient>("/clients/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of clients List of clients for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ClientList</returns>
        public ClientList ListClients(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string))
        {
            Antenny.Client.ApiResponse<ClientList> localVarResponse = ListClientsWithHttpInfo(custId, sort, limit, startKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of clients List of clients for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <returns>ApiResponse of ClientList</returns>
        public Antenny.Client.ApiResponse<ClientList> ListClientsWithHttpInfo(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string))
        {
            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custId", Antenny.Client.ClientUtils.ParameterToString(custId)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientList>("/customers/{custId}/clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of clients List of clients for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientList</returns>
        public async System.Threading.Tasks.Task<ClientList> ListClientsAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Antenny.Client.ApiResponse<ClientList> localVarResponse = await ListClientsWithHttpInfoAsync(custId, sort, limit, startKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of clients List of clients for a customer
        /// </summary>
        /// <exception cref="Antenny.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="custId">Customer Id to get clients for</param>
        /// <param name="sort">Defines sort direction (optional)</param>
        /// <param name="limit">Limits the number of returned items (optional)</param>
        /// <param name="startKey">Defines start of page of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientList)</returns>
        public async System.Threading.Tasks.Task<Antenny.Client.ApiResponse<ClientList>> ListClientsWithHttpInfoAsync(Guid custId, string sort = default(string), int? limit = default(int?), string startKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Antenny.Client.RequestOptions localVarRequestOptions = new Antenny.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Antenny.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Antenny.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custId", Antenny.Client.ClientUtils.ParameterToString(custId)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Antenny.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientList>("/customers/{custId}/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
